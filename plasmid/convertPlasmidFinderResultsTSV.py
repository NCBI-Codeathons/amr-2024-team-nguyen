
import argparse
from enum import IntEnum
import json
import os
import pandas as pd

# Column indices
class Column(IntEnum):
   Database	= 0
   Plasmid = 1
   Identity	= 2
   QueryTemplateLength = 3
   Contig = 4
   Position_in_contig = 5
   Note = 6
   Accession_number = 7



# Read a data.json file and write a new TSV.
def processJSON(inputFilename, outputFilename):

   with open(inputFilename, 'r') as file:

      try:
         strJSON = file.read()

         JSON = json.loads(strJSON)

         # TODO: Add validation to the intermediate JSON parsing steps below.

         plasmidfinder = JSON["plasmidfinder"]

         # plasmidfinder.user_input.filename(s)[0]
         fileAndPath = plasmidfinder["user_input"]["filename(s)"][0]
         
         # Example filename: GCA_904866355.1_KSB1_6F_genomic.denovo.fna
         filenameOnly = os.path.basename(fileAndPath)

         # The genome accession is everything in the filename prior to the 2nd underscore.
         tokens = filenameOnly.split("_")
         genomeAccession = f"{tokens[0]}_{tokens[1]}"

         with open(outputFilename, "w") as outputFile:

            results = plasmidfinder["results"]
            for resultKey in results:

               if resultKey == "Gram Positive" or resultKey == "Gram negative":
                  continue

               databases = results[resultKey]

               for dbKey in databases:
                  database = databases[dbKey]
                  
                  for contigKey in database:

                     data = database[contigKey]
                     contig = data["contig_name"]
                     identity = data["identity"]

                     # Write a row of TSV to the output file.
                     writeOutputTSV(outputFile, contig, genomeAccession, identity)

      except Exception:
         print(f"The following error occurred: {Exception}")



# Trim a string that's possibly null and always return a non-null value.
def safeTrim(text: str):
   if not text or text != text:
      return ""
   
   trimmedText = text.strip()
   if len(trimmedText) < 1:
      return ""
   
   return trimmedText


# Format input parameters as a line of TSV and append to the output file.
def writeOutputTSV(outputFile, contig, genomeAccession, identity):

   # For now, all results are plasmids.
   call = "PL"

   # Validate the contig parameter.
   contig = safeTrim(contig)
   if len(contig) < 1:
      # TODO: raise an exception?
      return
   
   # If "guided" is in Contig, it's a guided file. Otherwise, (or if it contains "denovo") it's denovo.
   guidedIndex = contig.find(".guided.")
   if guidedIndex > -1:
      asmType = "guided"
   else:
      asmType = "denovo"

   # contig_acc is the first token of Contig.
   spaceIndex = contig.find(" ")
   contigAccession = contig[0:spaceIndex]
   
   # Trim the genome accession parameter.
   genomeAccession = safeTrim(genomeAccession)

   # Use identity to calculate the score.
   if identity != identity:
      score = 0
   else:
      score = identity / 100.0

   # Add a line of TSV to the output file.
   outputFile.write(f"{genomeAccession}\t{contigAccession}\t{asmType}\t{call}\t{score}\n")


   

if __name__ == '__main__':

   parser = argparse.ArgumentParser(description="Filter and reformat the data.json file generated by PlasmidFinder and save the results as a TSV file.")

   parser.add_argument("--input", dest="inputFile", metavar='INPUT_FILE', nargs=1, required=True, help="The JSON input filename")
   parser.add_argument("--output", dest="outputFile", metavar='OUTPUT_FILE', nargs=1, required=True, help="The TSV output filename")

   args = parser.parse_args()

   # Validate the input file parameter.
   inputFile = safeTrim(args.inputFile[0])
   if len(inputFile) < 1:
      raise Exception("Invalid inputFile parameter")
   elif not inputFile.endswith(".json"):
      raise Exception("The input file must end in .json")
   
   # Validate the output file parameter.
   outputFile = safeTrim(args.outputFile[0])
   if len(outputFile) < 1:
      raise Exception("Invalid outputFile parameter")

   # Process the input file.
   processJSON(inputFile, outputFile)

